instance
1. initMixin
  1.1 initLifecycle
    vm.$parent = parent
    vm.$root = parent ? parent.$root : vm

    vm.$children = []
    vm.$refs = {}

    vm._watcher = null
    vm._inactive = null
    vm._directInactive = false
    vm._isMounted = false
    vm._isDestroyed = false
    vm._isBeingDestroyed = false
  1.2 initEvents
    vm._events = Object.create(null)
    vm._hasHookEvent = false
  1.3 initRender
    vm._vnode = null
    vm._staticTrees = null
    vm.$slots = resolveSlots(options._renderChildren, renderContext)
    vm.$scopedSlots = emptyObject
    vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)
    // normalization is always applied for the public version, used in
    // user-written render functions.
    vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)
  1.4 callHook(vm, 'beforeCreate')
    handlers = vm.$options[hook]
    handlers[i].call(vm)
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook)
    }
  1.5 initInjections
  1.6 initState
    vm._watchers = []
    1.6.1 initProps
    1.6.2 initMethods
    1.6.3 initData
      data = vm._data = typeof data === 'function'
        ? getData(data, vm)
        : data || {}
      observe(data, true /* asRootData */)
    1.6.4 initComputed
    1.6.5 initWatch
  1.7 initProvide
  1.8 callHook(vm, 'created')
  1.9 vm.$mount(vm.$options.el)
    if (vm.$options.el) {
      vm.$mount(vm.$options.el)
    }
2. stateMixin
  2.1 Object.defineProperty(Vue.prototype, '$data', dataDef)
  2.2 Object.defineProperty(Vue.prototype, '$props', propsDef)
  2.3 Vue.prototype.$set = set
  2.4 Vue.prototype.$delete = del
  2.5 Vue.prototype.$watch
3. eventsMixin
  3.1 Vue.prototype.$on
  3.2 Vue.prototype.$once
  3.3 Vue.prototype.$off
  3.4 Vue.prototype.$emit
4. lifecycleMixin
  4.1 Vue.prototype._update
  4.2 Vue.prototype.$forceUpdate
  4.2 Vue.prototype.$destroy
5. renderMixin
  5.1 Vue.prototype.$nextTick
  5.2 Vue.prototype._render


observe
1. ob = new Observer(value)
2. Observer
  this.value = value
  this.dep = new Dep()
  Dep
    static target: ?Watcher;
    this.id = uid++
    this.subs = []
    addSub (sub: Watcher)
    removeSub (sub: Watcher)
    depend()
    otify ()
  Dep.target = null
  this.vmCount = 0